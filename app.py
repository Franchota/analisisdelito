{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import plotly.offline as pyo\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px\n",
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "from dash.dependencies import Input, Output\n",
    "import pandas as pd\n",
    "import json\n",
    "import plotly.figure_factory as ff\n",
    "import csv\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Anaconda\\envs\\bio-env\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3146: DtypeWarning:\n",
      "\n",
      "Columns (3) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"delitos_completo.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(480177, 36)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfdummies = pd.get_dummies(df['tipo_delito'])\n",
    "df = pd.concat([df, dfdummies], axis = 1)\n",
    "df[\"Hurto\"] = df.filter(like=\"Hurto\")\n",
    "df[\"Robo\"] =df.filter(like=\"Robo\")\n",
    "\n",
    "m = {\n",
    "        \"1\":'enero',\n",
    "        \"2\":'febrero',\n",
    "        \"3\":'marzo',\n",
    "        \"4\":'abril',\n",
    "        \"5\":'mayo',\n",
    "        \"6\":'junio',\n",
    "        \"7\":'julio',\n",
    "        \"8\":'agosto',\n",
    "        \"9\":'septiembre',\n",
    "        \"10\":'octubre',\n",
    "        \"11\":'noviembre',\n",
    "        \"12\":'diciembre'\n",
    "        }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'app' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-b3655526c8d0>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m app.add_url_rule('/favicon.ico',\n\u001b[0m\u001b[0;32m     19\u001b[0m                  redirect_to=url_for('static', filename='favicon.ico'))\n\u001b[0;32m     20\u001b[0m \u001b[1;33m@\u001b[0m\u001b[0mapp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mroute\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'/favicon.ico'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'app' is not defined"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import plotly.offline as pyo\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px\n",
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "from dash.dependencies import Input, Output\n",
    "import pandas as pd\n",
    "import json\n",
    "import plotly.figure_factory as ff\n",
    "import csv\n",
    "import os\n",
    "from flask import send_from_directory\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "df = pd.read_csv(\"delitos_completo.csv\")\n",
    "\n",
    "\n",
    "dfdummies = pd.get_dummies(df['tipo_delito'])\n",
    "df = pd.concat([df, dfdummies], axis = 1)\n",
    "df[\"Hurto\"] = df.filter(like=\"Hurto\")\n",
    "df[\"Robo\"] =df.filter(like=\"Robo\")\n",
    "\n",
    "m = {\n",
    "        \"1\":'enero',\n",
    "        \"2\":'febrero',\n",
    "        \"3\":'marzo',\n",
    "        \"4\":'abril',\n",
    "        \"5\":'mayo',\n",
    "        \"6\":'junio',\n",
    "        \"7\":'julio',\n",
    "        \"8\":'agosto',\n",
    "        \"9\":'septiembre',\n",
    "        \"10\":'octubre',\n",
    "        \"11\":'noviembre',\n",
    "        \"12\":'diciembre'\n",
    "        }\n",
    "\n",
    "\n",
    "USERNAME_PASSWORD_PAIRS = [\n",
    "    [\"franbrom\", \"Abcdefghi9\"], [\"username\", \"password\"]\n",
    "]\n",
    "\n",
    "\n",
    "external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
    "\n",
    "fig_ev = df.groupby(['ano_mes','ano','mes_num'],as_index=False).count().iloc[:,[0,1,2,3,4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]]\n",
    "\n",
    "\n",
    "tabla_aux1 = df.groupby(['ano_mes','tipo_delito',],as_index=False).count().iloc[:,[0,1,2,3, 4]]\n",
    "tabla_aux3 = df.groupby(['ano','mes_num'],as_index=False).count().iloc[:,[0,1,2]]\n",
    "tabla_aux3.columns = ['Año', 'Mes', 'cantidad']\n",
    "tabla_aux2 = tabla_aux3.pivot_table(index = 'Mes',columns = 'Año',values = 'cantidad',aggfunc = 'sum')\n",
    "\n",
    "\n",
    "\n",
    "figura1 = px.line(fig_ev, x = 'mes_num', y = 'fecha',color= 'ano', hover_name='ano_mes', title = \"Evolución de la cantidad de hechos\", labels = dict(mes_num = \"Mes del año\", fecha=\"Cantidad de casos (miles)\",ano = \"Año\"))\n",
    "figura1.update_layout(title_x=0.5, xaxis_tickmode=\"linear\")\n",
    "\n",
    "\n",
    "figura2 = px.line(tabla_aux1,x = 'ano_mes',y = 'id',color= 'tipo_delito', title = \"Evolución de la cantidad de hechos por tipo de delito\",labels = dict(ano_mes = \"Meses por año\", id=\"Cantidad de casos (miles)\"))\n",
    "figura2.update_layout(title_x=0.5)\n",
    "\n",
    "figura1.update_layout(paper_bgcolor=\"#eaf2fc\")\n",
    "\n",
    "app = dash.Dash()\n",
    "auth = dash_auth.BasicAuth(app, USERNAME_PASSWORD_PAIRS)\n",
    "server = app.server\n",
    "\n",
    "anos=df.ano.unique()\n",
    "mes_num=df.mes_num.unique()\n",
    "\n",
    "\n",
    "\n",
    "app.layout = html.Div([\n",
    "             html.H1(\"Análisis del crimen. CABA\",style={\"color\":\"#696d72\", 'paddingTop':25, \"fontSize\":70, 'textAlign': 'center'}),\n",
    "             \n",
    "                 dcc.Tabs(id = \"tabs\", value=\"tab0\", children=[\n",
    "                     dcc.Tab(label= \"Inicio\", id=\"Inicio\", value = \"tab0\", children = [\n",
    "                         html.Div([\n",
    "                             html.Div(dcc.Graph(id=\"evolucion\", figure = figura1)),\n",
    "                             html.Div([html.Div(dcc.Graph(id=\"heatmap\", figure = figura2), style ={'width': '50%', 'vertical-align': 'left','display':'inline-block'}),\n",
    "                             html.Div(dcc.Graph(id=\"tipo_delito\", figure = {\"data\":[go.Heatmap(\n",
    "                   z=tabla_aux3[\"cantidad\"],\n",
    "                   x=tabla_aux3[\"Año\"], name=\"año\",\n",
    "                   y=tabla_aux3['Mes'],\n",
    "                   hoverongaps = False,\n",
    "                   colorscale = 'Blues'\n",
    "                    )], \"layout\":go.Layout(title =\"Cantidad de delitos por mes y año\", title_x=0.5, xaxis_tickmode=\"linear\", xaxis_title_text=\"Año\", yaxis_title_text=\"Mes\",\n",
    "    yaxis_tickmode=\"linear\")}), style ={'width': '50%', 'vertical-align': 'right','display':'inline-block'})],                              )])\n",
    "                                       ]),\n",
    "                     \n",
    "                     \n",
    "                     \n",
    "                    dcc.Tab(label='Barrio y delitos', id = \"tab1\", value = \"tab1\", children=[\n",
    "                    html.H5(\"Año\"),    \n",
    "                    dcc.Dropdown(id = \"dropdown\", options =[{\"label\": x, \"value\": x} for x in anos],\n",
    "                    value = anos[0], clearable = False), \n",
    "                     dcc.Graph(id=\"bar-chart\")\n",
    "                      ]),\n",
    "    \n",
    "    \n",
    "                    dcc.Tab(label='Mapa del delito', children=[\n",
    "                    html.H5(\"Año\"),\n",
    "                    dcc.Dropdown(id = \"dropdown2\", options =[{\"label\": x, \"value\": x} for x in anos],\n",
    "                    value = anos[0], clearable = False),\n",
    "                    html.H5(\"Mes\"),\n",
    "                    dcc.Dropdown(id = \"dropdown3\", options =[{\"label\":m[str(x)].upper(), \"value\": x} for x in mes_num],\n",
    "                    value = mes_num[0], clearable = False),\n",
    "                    html.Div(), \n",
    "                        html.H5(\"\"), \n",
    "                   \n",
    "                    html.Div([html.Div(dcc.Loading(dcc.Graph(id=\"maps\")), style ={'width': '80%', 'vertical-align': 'right','display':'inline-block'}),html.Div(dcc.Graph(id=\"velocimetro\"),  style ={'width': '20%', 'vertical-align': 'left','display':'inline-block'}),\n",
    "                              ], \n",
    "                             )\n",
    "                    \n",
    "                    #dcc.Loading(dcc.Graph(id=\"maps\")))])\n",
    "                \n",
    "                                ]),\n",
    "                     \n",
    "                dcc.Tab(label='Información', children=[\n",
    "            dcc.Graph(\n",
    "                figure={\n",
    "                    \n",
    "                }\n",
    "            )\n",
    "        ]),\n",
    "    \n",
    "])\n",
    "\n",
    "])\n",
    "\n",
    "#def evolucion(ano, ano_mes, mes_num):\n",
    "            \n",
    " #           return fig_eva\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"bar-chart\", \"figure\"),\n",
    "    [Input(\"dropdown\", \"value\")])\n",
    "\n",
    "\n",
    "\n",
    "def update_figure(ano):\n",
    "            filtered_df = df[df[\"ano\"] == ano]\n",
    "            fig = go.Histogram(x = filtered_df[filtered_df[\"tipo_delito\"]==\"Homicidio\"][\"comuna\"], name=\"Homicidio\")\n",
    "            fig2 = go.Histogram(x = filtered_df[filtered_df[\"tipo_delito\"]==\"Lesiones\"][\"comuna\"], name=\"Lesiones\")\n",
    "            fig3 = go.Histogram(x = filtered_df[filtered_df[\"tipo_delito\"].str.contains(\"Hurto\")][\"comuna\"], name = \"Hurto\")\n",
    "            fig4 = go.Histogram(x = filtered_df[filtered_df[\"tipo_delito\"].str.contains(\"Robo\")][\"comuna\"], name = \"Robo\")\n",
    "            return {\n",
    "            'data': [fig, fig2, fig3, fig4],\n",
    "            'layout': go.Layout(\n",
    "             xaxis={\"type\":\"linear\", 'title': 'Comuna'},\n",
    "             yaxis={'title': 'Delitos'},\n",
    "             barmode = \"group\", \n",
    "             title= \"Cantidad de delitos por comuna durante el año \"+str(ano),\n",
    "             title_x= 0.5, xaxis_tickmode=\"linear\", paper_bgcolor=\"#eaf2fc\")\n",
    "             \n",
    "    }\n",
    "\n",
    "@app.callback(\n",
    "            Output(\"maps\", \"figure\"),\n",
    "            [Input(\"dropdown2\", \"value\"),\n",
    "            Input(\"dropdown3\", \"value\")])\n",
    "\n",
    "def update_map(ano, mes_num):\n",
    "            filtered_df = df[df[\"ano\"] == ano]\n",
    "            filtered_df = filtered_df[filtered_df[\"mes_num\"] == mes_num]\n",
    "        \n",
    "            fig_map = px.scatter_mapbox(filtered_df, lat=\"lat\", lon=\"long\",  center = dict(lat= -34.599722, lon = -58.381944), hover_name=\"comuna\", color=\"tipo_delito\", zoom=11, height=500)\n",
    "            \n",
    "            fig_map.update_layout(mapbox_style=\"open-street-map\")\n",
    "            fig_map.update_layout(margin={\"r\":0,\"t\":25,\"l\":0,\"b\":0})\n",
    "            fig_map.update_layout(title = \"Ubicación geográfica de los delitos cometidos el mes \" + m[str(mes_num)] + \" de \"+str(ano))\n",
    "            fig_map.update_layout(paper_bgcolor=\"#eaf2fc\")\n",
    "            return fig_map\n",
    "            #fig_map.update_layout(\n",
    "             #autosize=True,\n",
    "            #hovermode='closest',\n",
    "           \n",
    "            #center=dict(\n",
    "            #lat=38.92,\n",
    "            #lon=-77.07\n",
    "            #))\n",
    "\n",
    "@app.callback(\n",
    "            Output(\"velocimetro\", \"figure\"),\n",
    "            [Input(\"dropdown2\", \"value\"),\n",
    "            Input(\"dropdown3\", \"value\")])\n",
    "\n",
    "def update_velocimetro(ano, mes_num):\n",
    "    filtered_df = df[df[\"ano\"] == ano]\n",
    "    filtered_df = filtered_df[filtered_df[\"mes_num\"] == mes_num]\n",
    "    fig_vel = go.Figure(go.Indicator(\n",
    "    mode = \"gauge+number\",\n",
    "    \n",
    "    value = filtered_df.tipo_delito.count(),\n",
    "        gauge = {'axis': {'range': [None, 20000]},\n",
    "             'steps' : [\n",
    "                 {'range': [0, 10000], 'color': \"lightgray\"},\n",
    "                 {'range': [10000, 17000], 'color': \"gray\"}],\n",
    "             'threshold' : {'line': {'color': \"red\", 'width': 4}, 'thickness': 0.75, 'value': 19900}},)\n",
    ")\n",
    "    fig_vel.update_layout(title = \"Cantidad total de delitos\")\n",
    "    fig_vel.update_layout(margin={\"r\":125,\"t\":300})\n",
    "    fig_vel.update_layout(paper_bgcolor=\"#eaf2fc\")\n",
    "    \n",
    "    #fig_vel.update_traces(align=\"right\")\n",
    "    #fig_vel.update_traces(delta_position=\"right\")\n",
    "    #fig_vel.update_traces(gauge_shape=\"bullet\")\n",
    "    return fig_vel\n",
    "            \n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
